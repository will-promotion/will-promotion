---
type Props = {
  id: string;
  title: string;
  learnings: string[];
  content: string;
};

const { id, title, learnings, content } = Astro.props;
---
<div
  class="modal micromodal-slide"
  id={id}
  aria-hidden="true"
>
  <div class="modal__overlay" tabindex="-1" data-micromodal-close>
    <div
      class="modal__container"
      role="dialog"
      aria-modal="true"
      aria-labelledby={`${id}-title`}
    >
      <header class="modal__header">
        <h2 class="modal__title" id={`${id}-title`}>{title}</h2>
        <button
          class="modal__close"
          aria-label="Close modal"
          data-micromodal-close
        ></button>
      </header>
      <main class="modal__content" id={`${id}-content`}>
        <h3>習得技術</h3>
        <ul>
          {
            learnings.map(item => (<li>・{item}</li>))
          }
        </ul>
        <h3>最終成果物</h3>
        <p>{content}</p>
      </main>
    </div>
  </div>
</div>

<style>
  .modal h3 {
    margin-top: 1.5rem;
    margin-bottom: 1rem;
    font-weight: 500;
    font-size: 1.5rem;
    line-height: 1.1;
    letter-spacing: 0;
    color: #41475a;
  }

  .modal p {
    font-weight: 500;
    font-size: 1rem;
    line-height: 1.6;
    letter-spacing: 0;
    color: #41475a;
  }

  .modal li {
    font-weight: 500;
    font-size: 1rem;
    line-height: 1.8;
    letter-spacing: 0;
    color: #41475a;
  }

  .modal__overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .modal__container {
    background-color: #fff;
    padding: 30px;
    max-width: 900px;
    width: 100%;
    max-height: 100vh;
    border-radius: 4px;
    overflow-y: auto;
    box-sizing: border-box;
  }

  .modal__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .modal__title {
    font-weight: 600;
    font-size: 1.25rem;
    line-height: 1.25;
    color: #00449e;
  }

  .modal__close {
    background: transparent;
    border: 0;
  }

  .modal__header .modal__close::before {
    content: "✕";
  }

  .modal__content {
    margin-top: 2rem;
    margin-bottom: 2rem;
  }


  .micromodal-slide {
    display: none;
  }

  .micromodal-slide.is-open {
    display: block;
  }

  .micromodal-slide[aria-hidden=false] .modal__overlay {
    -webkit-animation: mmfadeIn 0.3s cubic-bezier(0, 0, 0.2, 1);
    animation: mmfadeIn 0.3s cubic-bezier(0, 0, 0.2, 1);
  }

  .micromodal-slide[aria-hidden=false] .modal__container {
    -webkit-animation: mmslideIn 0.3s cubic-bezier(0, 0, 0.2, 1);
    animation: mmslideIn 0.3s cubic-bezier(0, 0, 0.2, 1);
  }

  .micromodal-slide[aria-hidden=true] .modal__overlay {
    -webkit-animation: mmfadeOut 0.3s cubic-bezier(0, 0, 0.2, 1);
    animation: mmfadeOut 0.3s cubic-bezier(0, 0, 0.2, 1);
  }

  .micromodal-slide[aria-hidden=true] .modal__container {
    -webkit-animation: mmslideOut 0.3s cubic-bezier(0, 0, 0.2, 1);
    animation: mmslideOut 0.3s cubic-bezier(0, 0, 0.2, 1);
  }

  .micromodal-slide .modal__container,
  .micromodal-slide .modal__overlay {
    will-change: transform;
  }

  @-webkit-keyframes mmfadeIn {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }

  @keyframes mmfadeIn {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }

  @-webkit-keyframes mmfadeOut {
    from {
      opacity: 1;
    }

    to {
      opacity: 0;
    }
  }

  @keyframes mmfadeOut {
    from {
      opacity: 1;
    }

    to {
      opacity: 0;
    }
  }

  @-webkit-keyframes mmslideIn {
    from {
      transform: translateY(15%);
    }

    to {
      transform: translateY(0);
    }
  }

  @keyframes mmslideIn {
    from {
      transform: translateY(15%);
    }

    to {
      transform: translateY(0);
    }
  }

  @-webkit-keyframes mmslideOut {
    from {
      transform: translateY(0);
    }

    to {
      transform: translateY(-10%);
    }
  }

  @keyframes mmslideOut {
    from {
      transform: translateY(0);
    }

    to {
      transform: translateY(-10%);
    }
  }
</style>

<script>
  import MicroModal from 'micromodal';

  MicroModal.init();
</script>
